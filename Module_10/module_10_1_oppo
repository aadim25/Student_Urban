import threading,random,time
class Bank:
    def __init__(self):
        self.balance=0
        self.lock=threading.Lock()
        
    def deposit(self):
        time.sleep(0.001)
        my_rand = random.randint(50,500)
        if my_rand:
            self.balance +=random.randint(50,500)
            print(f'Пополнение: {my_rand}. Баланс: {self.balance}.')
        if self.balance>=500 and self.lock.locked():
            self.lock.release
        
    def take(self):
        time.sleep(0.001)
        my_rand = random.randint(50,500)
        print(f'Запрос на {my_rand}')
        if my_rand>self.balance:
            print('Запрос отклонен, недостаточно средств')
        else:
            self.balance-=my_rand
            print(f'Снятие {my_rand}.')
            print(f'Баланс {self.balance}.')
        

bk = Bank()

'''Т.к. методы принимают self, в потоки нужно передать сам объект класса Bank'''
th1 = threading.Thread(target=Bank.deposit, args=(bk,))
th2 = threading.Thread(target=Bank.take, args=(bk,))

th1.start()
th2.start()
th1.join()
th2.join()

print(f'Итоговый баланс: {bk.balance}')
    